{"version":3,"sources":["./src/app/auth/auth.component.ts","./src/app/auth/auth.component.html","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/logout/logout.component.ts","./src/app/auth/resetpassword/resetpassword.component.ts","./src/app/auth/resetpassword/resetpassword.component.html","./src/app/auth/signup/signup.component.ts","./src/app/auth/signup/signup.component.html"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"authcomponent\">\r\n    <div class=\"logoaligncenter\">\r\n        <a href=\"\">\r\n            <img class=\"logoimage\" src=\"./../../assets/logo.svg\" alt=\"ECart company Logo\"/>\r\n        </a>\r\n    </div>\r\n    <router-outlet></router-outlet>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router'\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginComponent } from './login/login.component';\nimport { AuthComponent } from './auth.component';\nimport { NavbarModule } from './../navbar/navbar.module';\nimport { LogoutComponent } from './logout/logout.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { ResetPasswordComponent } from './resetpassword/resetpassword.component';\n\n\nconst authRoutes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      {\n        path: 'login', component: LoginComponent\n      },\n      {\n        path: 'logout', component: LogoutComponent\n      },\n      {\n        path: 'signup', component: SignupComponent\n      },\n      {\n        path: 'forgotpassword', component: ResetPasswordComponent\n      }\n    ]\n  }\n]\n\n@NgModule({\n  declarations: [LoginComponent, AuthComponent, LogoutComponent, SignupComponent, ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(authRoutes),\n    NavbarModule,\n    ReactiveFormsModule,\n  ]\n})\nexport class AuthModule { }\n","import { ThrowStmt } from '@angular/compiler';\nimport { Component, OnInit, OnChanges } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms'\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  submitted: boolean = false;\n\n  form_errors = {\n    username: '',\n    password: ''\n  }\n\n  validation_messages = {\n    'username': {\n      'required': 'user name is required.',\n    },\n    'password': {\n      'required': 'password is required.',\n    }\n  }\n  loginFailed: boolean;\n  loginFailedMessage: any;\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n                        username: new FormControl(\"\", Validators.required),\n                        password: new FormControl(\"\", Validators.required)\n    });\n\n    this.loginForm.valueChanges.subscribe(() => {\n      this.form_errors = {\n        username: '',\n        password: ''\n      }\n      this.loginFailed= false;\n      if (this.submitted && !this.loginForm.valid) {\n        this.populateErrorMessage();\n      }\n    });\n  }\n\n  onSubmit(): void {\n    this.submitted = true;\n\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value)\n      .subscribe(\n        data => {\n          console.log(data);\n          this.router.navigate(['/']);\n        },\n        error => {\n          this.loginFailed = true;\n          this.loginFailedMessage = error.message;\n          console.log(error);\n        }\n      );\n    }\n    else {\n      this.populateErrorMessage();\n    }\n  }\n\n  populateErrorMessage() {\n    Object.keys(this.form_errors).forEach(form_control => {\n      if (this.loginForm.controls[form_control].status == 'INVALID') {\n        Object.keys(this.loginForm.controls[form_control].errors).forEach(error_code => {\n          this.form_errors[form_control] += ' ' + this.validation_messages[form_control][error_code];\n        })\n      }\n    })\n  }\n\n  onChanges() {\n    \n  }\n\n}\n","<div>\n    <div class=\"loginbox\">\n\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n        \n            <p class=\"signintext h2\">Sign-In</p>\n            <label for=\"\" class=\"loginlabel\">Username:</label>\n            <input type=\"text\" class=\"form-control\"\n                [ngClass]=\"{'is-invalid': form_errors.username.length > 0}\" id=\"usr\" formControlName=\"username\">\n            <p [ngClass]=\"{'invalid-feedback': form_errors.username.length > 0}\">{{form_errors.username}}</p>\n    \n            <label for=\"\" class=\"loginlabel\">Password:</label>\n            <input type=\"password\" class=\"form-control\"\n                [ngClass]=\"{'is-invalid': form_errors.password.length > 0}\" id=\"password\" formControlName=\"password\">\n            <p [ngClass]=\"{'invalid-feedback': form_errors.password.length > 0}\">{{form_errors.password}}</p>\n    \n    \n            <button type=\"submit\" class=\"btn btn-block loginbutton\" [disabled]=\"submitted && !loginForm.valid\">Sign-In</button>\n\n            <div class=\"loginFailMessage\">\n                <p *ngIf=\"loginFailed\">Login Failed. Please try again!</p>\n                <p *ngIf=\"loginFailed\">{{loginFailedMessage}}</p>\n            </div>\n    \n        </form>\n\n        <a routerLinkActive=\"active\" routerLink=\"/user/signup\">\n            <p class=\"signup\">Sign-Up!</p>\n        </a>\n\n        <a routerLinkActive=\"active\" routerLink=\"/user/forgotpassword\">\n            <p class=\"forgotpassword\">Forgot Password?</p>\n        </a>\n        \n    </div>\n    \n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.css']\n})\nexport class LogoutComponent implements OnInit {\n\n  constructor(private authServie: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.authServie.isLoggedIn = false;\n    this.authServie.logout();\n    this.router.navigate(['/']);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-resetpassword',\n  templateUrl: './resetpassword.component.html',\n  styleUrls: ['./resetpassword.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetpasswordform: FormGroup;\n  form_errors = {\n    'email_id': ''\n  }\n  submitted: boolean = false;\n\n  validation_messages = {\n    'email_id': {\n      'required': 'email id is required.',\n      'email': 'email id wrong format.'\n    }\n  }\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.resetpasswordform = new FormGroup({\n      email_id: new FormControl('', [Validators.required, Validators.email])\n    })\n\n    this.resetpasswordform.valueChanges.subscribe(()=> {\n      this.form_errors = {\n        'email_id': ''\n      }\n\n      if (this.submitted)\n        this.populateErrorMessage();\n    })\n  }\n\n  populateErrorMessage() {\n    Object.keys(this.form_errors).forEach(form_control => {\n      if (this.resetpasswordform.controls[form_control].status == 'INVALID') {\n        Object.keys(this.resetpasswordform.controls[form_control].errors).forEach(error_code => {\n          this.form_errors[form_control] += ' ' + this.validation_messages[form_control][error_code];\n        })\n      }\n    })\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.resetpasswordform.valid)\n    {\n      let resetSuccess = this.authService.resetPassword(this.resetpasswordform.value);\n      if (resetSuccess) {\n        this.router.navigate(['/']);\n      }\n    }\n    else\n    {\n      this.populateErrorMessage();\n    }\n  }\n\n}\n","<div>\n\n    <div class=\"resetpasswordblock\">\n        <p class=\"resetpasswordtext h2\">Password Reset</p>\n\n        <p>\n            If you lost your password and wish to reset, please provide your email address in the below box.\n            We will sent a reset password link to your mail.\n        </p>\n\n        <form [formGroup]=\"resetpasswordform\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"firstblock\">\n                <label for=\"\" class=\"signuplabel\">Email Id:</label>\n                <input type=\"text\" class=\"form-control\"\n                    [ngClass]=\"{'is-invalid': form_errors.email_id.length > 0}\" id=\"email_id\" formControlName=\"email_id\">\n                <p [ngClass]=\"{'invalid-feedback': form_errors.email_id.length > 0}\">{{form_errors.email_id}}</p>\n\n                <button type=\"submit\" class=\"btn btn-block resetbutton\" [disabled]=\"submitted && !resetpasswordform.valid\">Reset</button>\n            </div>\n        </form>\n\n        \n\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  datepicked: object;\n\n  registerUserForm: FormGroup;\n  submitted = false;\n  registerFailed = false;\n  registerErrorMessage = '';\n  registered = false;\n  form_errors = {\n    'username': '',\n    'first_name': '',\n    'last_name': '',\n    'email_id': '',\n    'mob_number': '',\n    'password': '',\n    'dateofbirth': ''\n  }\n\n  validation_messages = {\n    'username': {\n      'required': 'user name is required.',\n      'minlength': 'user name must have more than 3 characters.',\n      'maxlength': 'user name must be less than 15 characters.'\n    },\n    'first_name': {\n      'required': 'first name is required.',\n      'minlength': 'first name must have more than 4 characters.',\n      'maxlength': 'first name should be less than 15 characters.'\n    },\n    'last_name': {\n      'required': 'last name is required.',\n      'minlength': 'last name must have more than 4 characters.',\n      'maxlength': 'first name should be less than 15 characters.'\n    },\n    'email_id': {\n      'required': 'email id is required.',\n      'email': 'email id wrong format.'\n    },\n    'mob_number': {\n      'required': 'mobile number is required.',\n      'pattern': 'mobile number should be 10 digit numeric value.'\n    },\n    'password': {\n      'required': 'password is required.',\n      'minlength': 'password should be atleast 6 charaters long.',\n      'pattern': 'password should contain one uppercase, one lowercase and one numeric, should not contain special character.'\n    },\n    'dateofbirth': {\n      'required': 'date of birth is mandatory'\n    }\n  }\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.registerUserForm = new FormGroup({\n      username: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(10)]),\n      first_name: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(15)]),\n      last_name: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(15)]),\n      email_id: new FormControl('', [Validators.required, Validators.email]),\n      mob_number: new FormControl('', [Validators.required, Validators.pattern(\"[0-9]{10}\")]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')]),\n      dateofbirth: new FormControl('', [Validators.required])\n    })\n\n    this.registerUserForm.valueChanges.subscribe(() => {\n      this.registerFailed = false;\n      this.form_errors = {\n        'username': '',\n        'first_name': '',\n        'last_name': '',\n        'email_id': '',\n        'mob_number': '',\n        'password': '',\n        'dateofbirth': ''\n      }\n\n      if (this.submitted)\n        this.populateErrorMessage();\n    })\n  }\n\n  populateErrorMessage() {\n    Object.keys(this.form_errors).forEach(form_control => {\n      if (this.registerUserForm.controls[form_control].status == 'INVALID') {\n        Object.keys(this.registerUserForm.controls[form_control].errors).forEach(error_code => {\n          this.form_errors[form_control] += ' ' + this.validation_messages[form_control][error_code];\n        })\n      }\n    })\n  }\n\n  onSubmit() {\n    this.submitted=true;\n    if (this.registerUserForm.valid)\n    {\n      console.log(this.registerUserForm.value);\n      this.authService.registerUser(this.registerUserForm.value)\n        .subscribe(\n          data => {\n            // show registration success page\n          },\n          error => {\n            this.registerFailed = true;\n            this.registerErrorMessage = error.message;\n            console.log(error);\n          }\n      );\n    }\n    else\n    {\n      this.populateErrorMessage();\n    }\n\n  }\n\n}\n","<div>\n\n    <div class=\"signupbox\">\n\n        <form [formGroup]=\"registerUserForm\" (ngSubmit)=\"onSubmit()\">\n        \n            <p class=\"signuptext h2\">Sign-Up</p>\n\n            <div class=\"datablock\">\n                <div class=\"firstblock\">\n                    <label for=\"\" class=\"signuplabel\">First Name:</label>\n                    <input type=\"text\" class=\"form-control\"\n                        [ngClass]=\"{'is-invalid': form_errors.first_name.length > 0}\" id=\"first_name\" formControlName=\"first_name\">\n                    <p [ngClass]=\"{'invalid-feedback': form_errors.first_name.length > 0}\">{{form_errors.first_name}}</p>\n                </div>\n        \n                <div class=\"secondblock\">\n                    <label for=\"\" class=\"signuplabel\">Last Name:</label>\n                    <input type=\"text\" class=\"form-control\"\n                        [ngClass]=\"{'is-invalid': form_errors.last_name.length > 0}\" id=\"last_name\" formControlName=\"last_name\">\n                    <p [ngClass]=\"{'invalid-feedback': form_errors.last_name.length > 0}\">{{form_errors.last_name}}</p>\n                </div>  \n            </div>\n\n            <div class=\"datablock\">\n                <div class=\"firstblock\">\n                    <label for=\"\" class=\"signuplabel\">Email Id:</label>\n                    <input type=\"text\" class=\"form-control\"\n                        [ngClass]=\"{'is-invalid': form_errors.email_id.length > 0}\" id=\"email_id\" formControlName=\"email_id\">\n                    <p [ngClass]=\"{'invalid-feedback': form_errors.email_id.length > 0}\">{{form_errors.email_id}}</p>\n                </div>\n\n                <div class=\"secondblock\">\n                    <label for=\"\" class=\"signuplabel\">Mobile Id:</label>\n                    <input type=\"text\" class=\"form-control\"\n                        [ngClass]=\"{'is-invalid': form_errors.mob_number.length > 0}\" id=\"mob_number\" formControlName=\"mob_number\">\n                    <p [ngClass]=\"{'invalid-feedback': form_errors.mob_number.length > 0}\">{{form_errors.mob_number}}</p>\n                </div>\n            </div>\n            \n            <div class=\"datablock\">\n                <div class=\"firstblock\">\n                    <label for=\"\" class=\"signuplabel\">Username:</label>\n                    <input type=\"text\" class=\"form-control\"\n                        [ngClass]=\"{'is-invalid': form_errors.username.length > 0}\" id=\"username\" formControlName=\"username\">\n                    <p [ngClass]=\"{'invalid-feedback': form_errors.username.length > 0}\">{{form_errors.username}}</p>\n                </div>\n\n                <div class=\"secondblock\">\n                    <label for=\"\" class=\"signuplabel\">Password:</label>\n                    <input type=\"text\" class=\"form-control\"\n                        [ngClass]=\"{'is-invalid': form_errors.password.length > 0}\" id=\"password\" formControlName=\"password\">\n                    <p [ngClass]=\"{'invalid-feedback': form_errors.password.length > 0}\">{{form_errors.password}}</p>\n                </div>\n            </div>\n\n            <div class=\"datablock\">\n                <div class=\"firstblock\">\n                    <label for=\"\" class=\"signuplabel\">Date Of Birth:</label>\n                    <input type=\"date\" class=\"form-control datepickerwidth\" [ngClass]=\"{'is-invalid': form_errors.dateofbirth.length > 0}\"\n                        id=\"dateofbirth\" formControlName=\"dateofbirth\">\n                    <p [ngClass]=\"{'invalid-feedback': form_errors.dateofbirth.length > 0}\">{{form_errors.dateofbirth}}</p>\n                </div>\n                <div class=\"secondblock\"> </div>\n            </div>\n            \n            <button type=\"submit\" class=\"btn btn-block signupinbutton\" [disabled]=\"submitted && !registerUserForm.valid\">Sign-Up</button>\n\n            <div class=\"registerFailMessage\">\n                <p *ngIf=\"registerFailed\">Registration Failed. Please try again!</p>\n                <p *ngIf=\"registerFailed\">{{registerErrorMessage}}</p>\n            </div>\n    \n        </form>\n\n        <p class=\"signinlinkarea\">\n            Already got an accout? \n            <a routerLinkActive=\"active\" class=\"signinlink\" routerLink=\"/user/login\">Sign In here</a>\n        </p>\n\n    </div>\n    \n\n    \n\n\n\n\n</div>"],"sourceRoot":"webpack:///"}